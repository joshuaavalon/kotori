{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Kotori is self-hosted image manipulation proxy based on Python. To improve websites performance, images are advised to be served with the exact size. The common solutions are using a image hosting service like Cloudinary or ImageKit. However, the price is much more expensive than host images on your storage (local or S3) and it is impossible to use your CDN, like Cloudflare. Kotori is designed to read from you storage and serve the image to through any CDN and any domain. Features Read from different storage (Current support local and S3) Different configurations based on urls Dynamic transformation queries Alias for predefine transformations Limit transforms allowed Limitations No support for files with the same name ( foo.png and foo.jpg are considered the same file) Deployment Please read on FLask document on how to deploy. Or you can use the Docker image .","title":"Introduction"},{"location":"#introduction","text":"Kotori is self-hosted image manipulation proxy based on Python. To improve websites performance, images are advised to be served with the exact size. The common solutions are using a image hosting service like Cloudinary or ImageKit. However, the price is much more expensive than host images on your storage (local or S3) and it is impossible to use your CDN, like Cloudflare. Kotori is designed to read from you storage and serve the image to through any CDN and any domain.","title":"Introduction"},{"location":"#features","text":"Read from different storage (Current support local and S3) Different configurations based on urls Dynamic transformation queries Alias for predefine transformations Limit transforms allowed","title":"Features"},{"location":"#limitations","text":"No support for files with the same name ( foo.png and foo.jpg are considered the same file)","title":"Limitations"},{"location":"#deployment","text":"Please read on FLask document on how to deploy. Or you can use the Docker image .","title":"Deployment"},{"location":"configuration/","text":"Configuration This part will teach you how to customize your configuration file. By default, Kotori come with two configuration loader: YAML and JSON. Here is a example configuration in YAML. The configuration location should be set by environment variable KOTORI_CONFIG . storage: local: type: file options: root: /var/www/html/image amazon: type: s3 options: region_name: us-east-1 endpoint_url: https://s3.amazonaws.com bucket: image-bucket aws_access_key_id: aws_access_key_id aws_secret_access_key: aws_secret_access_key root: foo/ transform: blog: - type: t options: - 800 - 400 route: \"/\": storage: local transform: - r - original \"/blog\": storage: amazon transform: blog expire: 86400 save: JPEG: progressive: true quality: 80 \"/private\": storage: local transform: false cache: CACHE_TYPE: \"filesystem\" CACHE_DIR: /var/www/html/cache CACHE_DEFAULT_TIMEOUT: 600 CACHE_THRESHOLD: 100 At root level, configuration contains 4 elements: storage , transform , route and cache . Storage storage should contains configuration of storage endpoint. In the example, amazon and local are the names of the storage endpoints. Kotori supports two types of endpoint: file and s3 . File root - Root folder to search from. For example, if the root is /var/www/html/image and it is used on /foo . When /foo/bar.jpg is requested, /var/www/html/image/bar.* will be searched. S3 region_name - Bucket region endpoint_url - You don't need this if you are using S3. Only change this if you are using other S3 compatible storage. bucket - Bucket name aws_access_key_id - Access key id aws_secret_access_key - Access key secret root - Prefix of the object key. S3 use key like foo/bar.jpg instead of real folder. Your key should not be started with / but it should be ended with / . Transform This section allows you to define alias for predefine transformation. The key is the alias and the value should be an array of transformations definition. Route The configuration define which configuration to use based on path. It matches based how accurate it matched. storage - The name of the storage configuration that defined in storage section. transform - The name of the transform configuration that defined in transform section or type of the transform. true to allow any transforms and false to decline all transforms. expire - max-age for Cache-Control header. save - Please refer to Pillow for formats and options. Cache Please refer to Flask-Caching for options.","title":"Configuration"},{"location":"configuration/#configuration","text":"This part will teach you how to customize your configuration file. By default, Kotori come with two configuration loader: YAML and JSON. Here is a example configuration in YAML. The configuration location should be set by environment variable KOTORI_CONFIG . storage: local: type: file options: root: /var/www/html/image amazon: type: s3 options: region_name: us-east-1 endpoint_url: https://s3.amazonaws.com bucket: image-bucket aws_access_key_id: aws_access_key_id aws_secret_access_key: aws_secret_access_key root: foo/ transform: blog: - type: t options: - 800 - 400 route: \"/\": storage: local transform: - r - original \"/blog\": storage: amazon transform: blog expire: 86400 save: JPEG: progressive: true quality: 80 \"/private\": storage: local transform: false cache: CACHE_TYPE: \"filesystem\" CACHE_DIR: /var/www/html/cache CACHE_DEFAULT_TIMEOUT: 600 CACHE_THRESHOLD: 100 At root level, configuration contains 4 elements: storage , transform , route and cache .","title":"Configuration"},{"location":"configuration/#storage","text":"storage should contains configuration of storage endpoint. In the example, amazon and local are the names of the storage endpoints. Kotori supports two types of endpoint: file and s3 .","title":"Storage"},{"location":"configuration/#file","text":"root - Root folder to search from. For example, if the root is /var/www/html/image and it is used on /foo . When /foo/bar.jpg is requested, /var/www/html/image/bar.* will be searched.","title":"File"},{"location":"configuration/#s3","text":"region_name - Bucket region endpoint_url - You don't need this if you are using S3. Only change this if you are using other S3 compatible storage. bucket - Bucket name aws_access_key_id - Access key id aws_secret_access_key - Access key secret root - Prefix of the object key. S3 use key like foo/bar.jpg instead of real folder. Your key should not be started with / but it should be ended with / .","title":"S3"},{"location":"configuration/#transform","text":"This section allows you to define alias for predefine transformation. The key is the alias and the value should be an array of transformations definition.","title":"Transform"},{"location":"configuration/#route","text":"The configuration define which configuration to use based on path. It matches based how accurate it matched. storage - The name of the storage configuration that defined in storage section. transform - The name of the transform configuration that defined in transform section or type of the transform. true to allow any transforms and false to decline all transforms. expire - max-age for Cache-Control header. save - Please refer to Pillow for formats and options.","title":"Route"},{"location":"configuration/#cache","text":"Please refer to Flask-Caching for options.","title":"Cache"},{"location":"docker/","text":"Docker docker-compose.yml version: \"3\" services: kotori: image: joshava/kotori ports: - 80:80 environment: KOTORI_CONFIG: /app/config.yml volumes: - /opt/kotori/config.yml:/app/config.yml - /opt/kotori/image:/image - cache:/image-cache volumes: cache: /image and /image-cache are locations defined in the configuration. /image is not needed if you are not using local storage. /image-cache is not needed if you are not using cache. (Not recommended)","title":"Docker"},{"location":"docker/#docker","text":"docker-compose.yml version: \"3\" services: kotori: image: joshava/kotori ports: - 80:80 environment: KOTORI_CONFIG: /app/config.yml volumes: - /opt/kotori/config.yml:/app/config.yml - /opt/kotori/image:/image - cache:/image-cache volumes: cache: /image and /image-cache are locations defined in the configuration. /image is not needed if you are not using local storage. /image-cache is not needed if you are not using cache. (Not recommended)","title":"Docker"},{"location":"plugin/","text":"Plugin You can create custom plugins to create your own transformation. You need to set environment variable KOTORI_PLUGINS to set the plugin folder. Configuration You can load you custom configuration by extending ConfigLoader . Transformation You can create custom plugins to create your own transformation. You need to extend Transformation . Here is an example. invert_transform.py from PIL import ImageOps from PIL.Image import Image from kotori.transform import Transformation class InvertTransformation(Transformation): @classmethod def name(cls) -> str: return \"invert\" def transform(self, image: Image, *args) -> Image: return ImageOps.invert(image) Then, you put the invert_transform.py in your plugin folder. Now you can use invert query.","title":"Plugin"},{"location":"plugin/#plugin","text":"You can create custom plugins to create your own transformation. You need to set environment variable KOTORI_PLUGINS to set the plugin folder.","title":"Plugin"},{"location":"plugin/#configuration","text":"You can load you custom configuration by extending ConfigLoader .","title":"Configuration"},{"location":"plugin/#transformation","text":"You can create custom plugins to create your own transformation. You need to extend Transformation . Here is an example. invert_transform.py from PIL import ImageOps from PIL.Image import Image from kotori.transform import Transformation class InvertTransformation(Transformation): @classmethod def name(cls) -> str: return \"invert\" def transform(self, image: Image, *args) -> Image: return ImageOps.invert(image) Then, you put the invert_transform.py in your plugin folder. Now you can use invert query.","title":"Transformation"},{"location":"transform/","text":"Transform The access url is http://<domain>/<transform>/<path>.<ext> . transform is the query the manipulate image. It can be either a series of queries separate by comma like t_100_100,r_200_200 or a alias defined in configuration. ext is the format it return. Origin /origin This query returns the origin image. Note that it may still be modify by the format or save options. Thumbnail /t_<width>_<height> /t_<width>_<height>_<resample> This query creates a thumbnail with a maximum given width and height. Note that this keeps the aspect ratio and does NOT enlarge the image. Resample resample define what methods to resample. Default to NEAREST . Note that you need the numeric value . Resize /r_<width>_<height> /t_<width>_<height>_<resample> /r_<width>_<height>_<resample>_<crop> This query resizes the image to given width and height. Resample resample define what methods to resample. Default to NEAREST . Note that you need the numeric value . Crop If you want to keep the aspect ratio, you must define how to crop the image. t - crop the top / left of the image. b - crop the bottom / right of the image. c - crop the center of the image.","title":"Transform"},{"location":"transform/#transform","text":"The access url is http://<domain>/<transform>/<path>.<ext> . transform is the query the manipulate image. It can be either a series of queries separate by comma like t_100_100,r_200_200 or a alias defined in configuration. ext is the format it return.","title":"Transform"},{"location":"transform/#origin","text":"/origin This query returns the origin image. Note that it may still be modify by the format or save options.","title":"Origin"},{"location":"transform/#thumbnail","text":"/t_<width>_<height> /t_<width>_<height>_<resample> This query creates a thumbnail with a maximum given width and height. Note that this keeps the aspect ratio and does NOT enlarge the image.","title":"Thumbnail"},{"location":"transform/#resample","text":"resample define what methods to resample. Default to NEAREST . Note that you need the numeric value .","title":"Resample"},{"location":"transform/#resize","text":"/r_<width>_<height> /t_<width>_<height>_<resample> /r_<width>_<height>_<resample>_<crop> This query resizes the image to given width and height.","title":"Resize"},{"location":"transform/#resample_1","text":"resample define what methods to resample. Default to NEAREST . Note that you need the numeric value .","title":"Resample"},{"location":"transform/#crop","text":"If you want to keep the aspect ratio, you must define how to crop the image. t - crop the top / left of the image. b - crop the bottom / right of the image. c - crop the center of the image.","title":"Crop"}]}